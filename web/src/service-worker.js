/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core'
import { ExpirationPlugin } from 'workbox-expiration'
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching'
import { registerRoute } from 'workbox-routing'
import { StaleWhileRevalidate } from 'workbox-strategies'
import { openDB, deleteDB, wrap, unwrap } from 'idb';

console.log('Hello from service worker')

clientsClaim()

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST)

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$')
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith('/_')) {
      return false
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false
    } // Return true to signal that we want to use the handler.

    return true
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
)

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) =>
    url.origin === self.location.origin && url.pathname.endsWith('.png'), // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
)

const dbPromise = openDB('quotes', 1, {
  upgrade(db) {
    if (!db.objectStoreNames.contains('user-quotes')) {
      db.createObjectStore('user-quotes', { keyPath: 'id' });
    }
  },
});

// how to read headers https://stackoverflow.com/questions/59087642/reading-request-headers-inside-a-service-worker
// how to read body https://stackoverflow.com/questions/62008450/service-worker-fetch-event-for-post-request-get-body
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  (event) => {
    console.log('POST data', event)
    return event.url.pathname === "/api/v1/user-quotes"
  },
  async ({url, request, event, params}) => {
    const body = await request.clone().json();

    const response = await fetch(request);

    dbPromise.then((db) => {
      const tx = db.transaction('user-quotes', 'readwrite')
      const store = tx.objectStore('user-quotes')
      if (body.favorite) {
        store.put({ id: body.quote_id })
      } else {
        store.delete(body.quote_id)
      }
      return tx.complete
    })
    return response;
  },
  'POST'
)

registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  (event) => {
    console.log('GET data', event)
    if (event.url.pathname === "/api/v1/user-quotes") {
      console.log('===> /api/v1/user-quotes')
    }
    return false
  },
  new StaleWhileRevalidate(),
  'GET'
)

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting()
  }
})

// Any other custom service worker logic can go here.
